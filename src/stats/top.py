from aiogram import F, Router
from aiogram.filters import Command
from aiogram.types import (
    Message,
    InlineKeyboardMarkup, InlineKeyboardButton, CallbackQuery,
)
from src.db.db_standards import (get_all_thunder, get_all_pull_ups, get_all_jerk, get_all_holding_the_axel,
                                 get_all_taking_on_axel_chest, get_all_axel_jerk, get_all_taking_on_the_chest,
                                 get_all_deadlift, get_all_axel_deadlift, get_all_handstand, get_all_turkish_ascent_axel,
                                 get_all_push_ups, get_all_high_jump, get_all_long_jump, get_all_bench_press,
                                 get_all_turkish_ascent_kettlebell, get_all_farmer_walk,
                                 get_all_front_squat, get_all_classic_squat, get_all_squat_over_the_head,
                                 get_all_gluteal_bridge, get_all_skipping_rope, get_all_shuttle_running)

router = Router()


@router.message(Command('top'))
async def top(message: Message) -> None:
    await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ –Ω–æ—Ä–º–∞—Ç–∏–≤: ", reply_markup=InlineKeyboardMarkup(inline_keyboard=[
        [
            InlineKeyboardButton(text="–°–∏–ª–æ–≤—ã–µ –Ω–æ—Ä–º–∞—Ç–∏–≤—ã", callback_data="power_standards"),
            InlineKeyboardButton(text="–§—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω—ã–µ –Ω–æ—Ä–º–∞—Ç–∏–≤—ã", callback_data="fun_standards"),
        ]
    ]), resize_keyboard=True, one_time_keyboard=True)


@router.callback_query(F.data == "power_standards")
async def callback_top(call: CallbackQuery) -> None:
    await call.message.edit_text("üìä<i>–°–∏–ª–æ–≤—ã–µ –Ω–æ—Ä–º–∞—Ç–∏–≤—ã</i>üìä", reply_markup=InlineKeyboardMarkup(inline_keyboard=[
        [
            InlineKeyboardButton(text="–ì—Ä–æ–º", callback_data="grom"),
            InlineKeyboardButton(text="–¢—É—Ä–µ—Ü–∫–∏–π –ø–æ–¥—ä–µ–º: –ê–∫—Å–µ–ª—å", callback_data="tur_acsel"),
        ],
        [
            InlineKeyboardButton(text="–¢—É—Ä–µ—Ü–∫–∏–π –ø–æ–¥—ä–µ–º: –ì–∏—Ä—è", callback_data="tur_gir"),
            InlineKeyboardButton(text="–ñ–∏–º –ª–µ–∂–∞ 1–ü–ú", callback_data="bench_press"),
        ],
        [
            InlineKeyboardButton(text="–†—ã–≤–æ–∫ –∞–∫—Å–µ–ª—è 1–ü–ú", callback_data="jerk"),
            InlineKeyboardButton(text="–í–∑—è—Ç–∏–µ –Ω–∞ –≥—Ä—É–¥—å –∞–∫—Å–µ–ª—è 1–ü–ú", callback_data="jerk_two"),
        ],
        [
            InlineKeyboardButton(text="–Ø–≥–æ–¥–∏—á–Ω—ã–π –º–æ—Å—Ç–∏–∫ 1–ü–ú", callback_data="most"),
            InlineKeyboardButton(text="–°—Ç–∞–Ω–æ–≤–∞—è —Ç—è–≥–∞ 1–ü–ú", callback_data="deadlift"),
        ],
        [
            InlineKeyboardButton(text="–†—ã–≤–æ–∫ 1–ü–ú", callback_data="usual_jerk"),
            InlineKeyboardButton(text="–í–∑—è—Ç–∏–µ –Ω–∞ –≥—Ä—É–¥—å 1–ü–ú", callback_data="chest"),
        ],
        [
            InlineKeyboardButton(text="–°—Ç–∞–Ω–æ–≤–∞—è —Ç—è–≥–∞ –∞–∫—Å–µ–ª—è 1–ü–ú", callback_data="deadlift_jerk"),
            InlineKeyboardButton(text="–ü—Ä–∏—Å–µ–¥ 1–ü–ú: –ö–ª–∞—Å—Å–∏—á–µ—Å–∫–∏–π", callback_data="squat_classic"),
        ],
        [
            InlineKeyboardButton(text="–ü—Ä–∏—Å–µ–¥ 1–ü–ú: –§—Ä–æ–Ω—Ç–∞–ª—å–Ω—ã–π", callback_data="squat_front"),
            InlineKeyboardButton(text="–ü—Ä–∏—Å–µ–¥ 1–ü–ú: –ù–∞–¥ –≥–æ–ª–æ–≤–æ–π", callback_data="squat_under_head"),
        ],
        [
            InlineKeyboardButton(text="–ù–∞–∑–∞–¥ –≤ –º–µ–Ω—é", callback_data="back_norm")
        ]
    ]))


@router.callback_query(F.data == "fun_standards")
async def callback_functional_standards(call: CallbackQuery) -> None:
    await call.message.edit_text("üìä<i>–§—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω—ã–µ –Ω–æ—Ä–º–∞—Ç–∏–≤—ã</i>üìä",
                                 reply_markup=InlineKeyboardMarkup(inline_keyboard=[
                                     [
                                         InlineKeyboardButton(text="–°–∫–∞–∫–∞–ª–∫–∞", callback_data="skipping_rope"),
                                         InlineKeyboardButton(text="–û—Ç–∂–∏–º–∞–Ω–∏—è –æ—Ç –ø–æ–ª–∞", callback_data="push_ups"),
                                     ],
                                     [
                                         InlineKeyboardButton(text="–ß–µ–ª–Ω–æ—á–Ω—ã–π –±–µ–≥", callback_data="shuttle_running"),
                                         InlineKeyboardButton(text="–ü—Ä–æ–≥—É–ª–∫–∞ —Ñ–µ—Ä–º–µ—Ä–∞", callback_data="farmer_walk"),
                                     ],
                                     [
                                         InlineKeyboardButton(text="–ü–æ–¥—Ç—è–≥–∏–≤–∞–Ω–∏—è", callback_data="pull_ups"),
                                         InlineKeyboardButton(text="–ü—Ä—ã–∂–æ–∫ –≤ –≤—ã—Å–æ—Ç—É", callback_data="high_jump"),
                                     ],
                                     [
                                         InlineKeyboardButton(text="–ü—Ä—ã–∂–æ–∫ –≤ –¥–ª–∏–Ω—É", callback_data="long_jump"),
                                         InlineKeyboardButton(text="–£–¥–µ—Ä–∂–∞–Ω–∏–µ –∞–∫—Å–µ–ª—è", callback_data="holding_axel"),
                                     ],
                                     [
                                         InlineKeyboardButton(text="–°—Ç–æ–π–∫–∞ –Ω–∞ —Ä—É–∫–∞—Ö", callback_data="handstand"),
                                         InlineKeyboardButton(text="–ù–∞–∑–∞–¥ –≤ –º–µ–Ω—é", callback_data="back_norm")
                                     ]
                                 ]))


@router.callback_query(F.data == 'back_norm')
async def back_callback(call: CallbackQuery):
    await call.message.edit_text("–í—ã–±–µ—Ä–∏—Ç–µ –Ω–æ—Ä–º–∞—Ç–∏–≤: ", reply_markup=InlineKeyboardMarkup(inline_keyboard=[
        [
            InlineKeyboardButton(text="–°–∏–ª–æ–≤—ã–µ –Ω–æ—Ä–º–∞—Ç–∏–≤—ã", callback_data="power_standards"),
            InlineKeyboardButton(text="–§—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω—ã–µ –Ω–æ—Ä–º–∞—Ç–∏–≤—ã", callback_data="fun_standards")
        ]
    ]))


@router.callback_query(F.data == "grom")
async def grom_callback(call: CallbackQuery):
    msg = await get_all_thunder()
    await call.message.edit_text(msg, reply_markup=InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="–ù–∞–∑–∞–¥ –≤ –º–µ–Ω—é", callback_data="back_norm")]
    ]))


@router.callback_query(F.data == "tur_acsel")
async def tur_acsel_callback(call: CallbackQuery):
    msg = await get_all_turkish_ascent_axel()
    await call.message.edit_text(msg, reply_markup=InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="–ù–∞–∑–∞–¥ –≤ –º–µ–Ω—é", callback_data="back_norm")]
    ]))


@router.callback_query(F.data == "tur_gir")
async def tur_gir_callback(call: CallbackQuery):
    msg = await get_all_turkish_ascent_kettlebell()
    await call.message.edit_text(msg, reply_markup=InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="–ù–∞–∑–∞–¥ –≤ –º–µ–Ω—é", callback_data="back_norm")]
    ]))


@router.callback_query(F.data == "bench_press")
async def bench_press_callback(call: CallbackQuery):
    msg = await get_all_bench_press()
    await call.message.edit_text(msg, reply_markup=InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="–ù–∞–∑–∞–¥ –≤ –º–µ–Ω—é", callback_data="back_norm")]
    ]))


@router.callback_query(F.data == "jerk")
async def jerk_callback(call: CallbackQuery):
    msg = await get_all_axel_jerk()
    await call.message.edit_text(msg, reply_markup=InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="–ù–∞–∑–∞–¥ –≤ –º–µ–Ω—é", callback_data="back_norm")]
    ]))


@router.callback_query(F.data == "jerk_two")
async def jerk_two_callback(call: CallbackQuery):
    msg = await get_all_taking_on_axel_chest()
    await call.message.edit_text(msg, reply_markup=InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="–ù–∞–∑–∞–¥ –≤ –º–µ–Ω—é", callback_data="back_norm")]
    ]))


@router.callback_query(F.data == "most")
async def most_callback(call: CallbackQuery):
    msg = await get_all_gluteal_bridge()
    await call.message.edit_text(msg, reply_markup=InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="–ù–∞–∑–∞–¥ –≤ –º–µ–Ω—é", callback_data="back_norm")]
    ]))


@router.callback_query(F.data == "deadlift")
async def deadlift_callback(call: CallbackQuery):
    msg = await get_all_deadlift()
    await call.message.edit_text(msg, reply_markup=InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="–ù–∞–∑–∞–¥ –≤ –º–µ–Ω—é", callback_data="back_norm")]
    ]))


@router.callback_query(F.data == "usual_jerk")
async def usual_jerk_callback(call: CallbackQuery):
    msg = await get_all_jerk()
    await call.message.edit_text(msg, reply_markup=InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="–ù–∞–∑–∞–¥ –≤ –º–µ–Ω—é", callback_data="back_norm")]
    ]))


@router.callback_query(F.data == "chest")
async def chest_callback(call: CallbackQuery):
    msg = await get_all_taking_on_the_chest()
    await call.message.edit_text(msg, reply_markup=InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="–ù–∞–∑–∞–¥ –≤ –º–µ–Ω—é", callback_data="back_norm")]
    ]))


@router.callback_query(F.data == "deadlift_jerk")
async def deadlift_jerk_callback(call: CallbackQuery):
    msg = await get_all_axel_deadlift()
    await call.message.edit_text(msg, reply_markup=InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="–ù–∞–∑–∞–¥ –≤ –º–µ–Ω—é", callback_data="back_norm")]
    ]))


@router.callback_query(F.data == "squat_classic")
async def squat_classic_callback(call: CallbackQuery):
    msg = await get_all_classic_squat()
    await call.message.edit_text(msg, reply_markup=InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="–ù–∞–∑–∞–¥ –≤ –º–µ–Ω—é", callback_data="back_norm")]
    ]))


@router.callback_query(F.data == "squat_front")
async def squat_under_head_callback(call: CallbackQuery):
    msg = await get_all_front_squat()
    await call.message.edit_text(msg, reply_markup=InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="–ù–∞–∑–∞–¥ –≤ –º–µ–Ω—é", callback_data="back_norm")]
    ]))


@router.callback_query(F.data == "squat_under_head")
async def squat_under_head_callback(call: CallbackQuery):
    msg = await get_all_squat_over_the_head()
    await call.message.edit_text(msg, reply_markup=InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="–ù–∞–∑–∞–¥ –≤ –º–µ–Ω—é", callback_data="back_norm")]
    ]))


@router.callback_query(F.data == "skipping_rope")
async def skipping_rope_callback(call: CallbackQuery):
    msg = await get_all_skipping_rope()
    await call.message.edit_text(msg, reply_markup=InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="–ù–∞–∑–∞–¥ –≤ –º–µ–Ω—é", callback_data="back_norm")]
    ]))


@router.callback_query(F.data == "push_ups")
async def push_up_callback(call: CallbackQuery):
    msg = await get_all_push_ups()
    await call.message.edit_text(msg, reply_markup=InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="–ù–∞–∑–∞–¥ –≤ –º–µ–Ω—é", callback_data="back_norm")]
    ]))


@router.callback_query(F.data == "shuttle_running")
async def shuttle_running_callback(call: CallbackQuery):
    msg = await get_all_shuttle_running()
    await call.message.edit_text(msg, reply_markup=InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="–ù–∞–∑–∞–¥ –≤ –º–µ–Ω—é", callback_data="back_norm")]
    ]))


@router.callback_query(F.data == "farmer_walk")
async def farmer_walk_callback(call: CallbackQuery):
    msg = await get_all_farmer_walk()
    await call.message.edit_text(msg, reply_markup=InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="–ù–∞–∑–∞–¥ –≤ –º–µ–Ω—é", callback_data="back_norm")]
    ]))


@router.callback_query(F.data == "pull_ups")
async def pull_up_callback(call: CallbackQuery):
    msg = await get_all_pull_ups()
    await call.message.edit_text(msg, reply_markup=InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="–ù–∞–∑–∞–¥ –≤ –º–µ–Ω—é", callback_data="back_norm")]
    ]))


@router.callback_query(F.data == "high_jump")
async def high_jump_callback(call: CallbackQuery):
    msg = await get_all_high_jump()
    await call.message.edit_text(msg, reply_markup=InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="–ù–∞–∑–∞–¥ –≤ –º–µ–Ω—é", callback_data="back_norm")]
    ]))


@router.callback_query(F.data == "long_jump")
async def long_jump_callback(call: CallbackQuery):
    msg = await get_all_long_jump()
    await call.message.edit_text(msg, reply_markup=InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="–ù–∞–∑–∞–¥ –≤ –º–µ–Ω—é", callback_data="back_norm")]
    ]))


@router.callback_query(F.data == "holding_axel")
async def holding_axel_callback(call: CallbackQuery):
    msg = await get_all_holding_the_axel()
    await call.message.edit_text(msg, reply_markup=InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="–ù–∞–∑–∞–¥ –≤ –º–µ–Ω—é", callback_data="back_norm")]
    ]))


@router.callback_query(F.data == "handstand")
async def handstand_callback(call: CallbackQuery):
    msg = await get_all_handstand()
    await call.message.edit_text(msg, reply_markup=InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="–ù–∞–∑–∞–¥ –≤ –º–µ–Ω—é", callback_data="back_norm")]
    ]))
