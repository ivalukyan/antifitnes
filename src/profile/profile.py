from aiogram import F, Router
from aiogram.filters import Command

from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup
from aiogram.types import (
    Message,
    InlineKeyboardMarkup, InlineKeyboardButton, CallbackQuery,
)

from src.db.db_standards import get_standards_by_id, insert_standard
from src.db.db_profile import (training_history, number_of_referral_points, info_subscription,
                               get_name)
from src.db.db_statistics import get_statistics_by_user
from src.auth.login import login_users

router = Router()


class Form(StatesGroup):
    """
    number_login - state for input number user
    """

    # Profile
    profile = State()


@router.message(Command('profile'))
async def profile(message: Message, state: FSMContext):
    if message.from_user.id in login_users:
        await message.answer(
            f"{await get_name(message.from_user.id)}, –¥–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å, –≤ —Å–ø–æ—Ä—Ç–∏–≤–Ω—ã–π –∫–ª—É–±!")

        await state.update_data(user_id=message.from_user.id)

        await message.answer("üìé–ü—Ä–æ—Ñ–∏–ª—åüìé", reply_markup=InlineKeyboardMarkup(inline_keyboard=[
            [
                InlineKeyboardButton(text="–ò—Å—Ç–æ—Ä–∏—è —Ç—Ä–µ–Ω–∏—Ä–æ–≤–æ–∫", callback_data="history_tren"),
                InlineKeyboardButton(text="–ö–æ–ª-–≤–æ —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω—ã—Ö –±–∞–ª–ª–æ–≤", callback_data="ref_bonus"),
            ],
            [
                InlineKeyboardButton(text="–ê–±–æ–Ω–µ–º–µ–Ω—Ç", callback_data="card"),
                InlineKeyboardButton(text="–ù–æ—Ä–º–∞—Ç–∏–≤—ã", callback_data="normatives")
            ],
            [InlineKeyboardButton(text="–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞", callback_data="statistics")]
        ]))
    else:
        await message.answer("–í—ã –Ω–µ –∑–∞—Ä–µ–≥–µ—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã, –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É - /login")


@router.callback_query(F.data == "history_tren")
async def callback_history_tren(callback: CallbackQuery, state: FSMContext) -> None:
    data = await state.get_data()
    msg = await training_history(data['user_id'])
    await callback.message.edit_text(f"üîó–ò–°–¢–û–†–ò–Ø –¢–†–ï–ù–ò–†–û–í–û–öüîó\n\n %s" % msg,
                                     reply_markup=InlineKeyboardMarkup(inline_keyboard=[
                                         [InlineKeyboardButton(text="–ù–∞–∑–∞–¥ –≤ –º–µ–Ω—é", callback_data="back_menu")]
                                     ]))


@router.callback_query(F.data == "ref_bonus")
async def callback_ref_bonus(callback: CallbackQuery, state: FSMContext) -> None:
    data = await state.get_data()
    msg = await number_of_referral_points(data['user_id'])
    await callback.message.edit_text("üîó–†–µ—Ñ–µ—Ä–∞–ª—å–Ω—ã–µ –±–æ–Ω—É—Å—ãüîó\n\n%s" % msg,
                                     reply_markup=InlineKeyboardMarkup(inline_keyboard=[
                                         [InlineKeyboardButton(text="–ù–∞–∑–∞–¥ –≤ –º–µ–Ω—é", callback_data="back_menu")]
                                     ]))


@router.callback_query(F.data == "card")
async def callback_card(callback: CallbackQuery, state: FSMContext) -> None:
    data = await state.get_data()
    msg = await info_subscription(data['user_id'])
    await callback.message.edit_text(f"ü™™–ê–ë–û–ù–ï–ú–ï–ù–¢ü™™\n\n{msg}",
                                     reply_markup=InlineKeyboardMarkup(inline_keyboard=[
                                         [InlineKeyboardButton(text="–ù–∞–∑–∞–¥ –≤ –º–µ–Ω—é", callback_data="back_menu")]
                                     ]))


@router.callback_query(F.data == "normatives")
async def callback_normatives(callback: CallbackQuery, state: FSMContext) -> None:
    data = await state.get_data()
    msg = await get_standards_by_id(data['user_id'])
    await callback.message.edit_text(f"üìâ–ê–ù–ê–õ–ò–ó –ù–û–†–ú–ê–¢–ò–í–û–íüìâ\n\n{msg}",
                                     reply_markup=InlineKeyboardMarkup(inline_keyboard=[
                                         [InlineKeyboardButton(text="–ù–∞–∑–∞–¥ –≤ –º–µ–Ω—é", callback_data="back_menu")]
                                     ]))


@router.callback_query(F.data == "statistics")
async def callback_statistics(callback: CallbackQuery) -> None:
    await callback.message.edit_text('–í—ã–±–µ—Ä–∏—Ç–µ –≥–æ–¥', reply_markup=InlineKeyboardMarkup(
        inline_keyboard=[
            [InlineKeyboardButton(text="2024", callback_data="2024")],
            [InlineKeyboardButton(text="2025", callback_data="2025")],
            [InlineKeyboardButton(text="2026", callback_data="2026")],
            [InlineKeyboardButton(text="2027", callback_data="2027")],
            [InlineKeyboardButton(text="2028", callback_data="2028")],
            [InlineKeyboardButton(text="2029", callback_data="2029")],
            [InlineKeyboardButton(text="2030", callback_data="2030")]
        ]
    ))


@router.callback_query(F.data == "2024")
async def callback_2024(callback: CallbackQuery, state: FSMContext) -> None:
    data = await state.get_data()
    msg = await get_statistics_by_user(data['user_id'], '2024')
    await callback.message.edit_text(f"üìä–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞üìä\n\n"
                                     f"{msg}",
                                     reply_markup=InlineKeyboardMarkup(inline_keyboard=[
                                         [InlineKeyboardButton(text="–ù–∞–∑–∞–¥ –≤ –º–µ–Ω—é", callback_data="back_menu")]
                                     ]))


@router.callback_query(F.data == "2025")
async def callback_2024(callback: CallbackQuery, state: FSMContext) -> None:
    data = await state.get_data()
    msg = await get_statistics_by_user(data['user_id'], '2025')
    await callback.message.edit_text(f"üìä–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞üìä\n\n"
                                     f"{msg}",
                                     reply_markup=InlineKeyboardMarkup(inline_keyboard=[
                                         [InlineKeyboardButton(text="–ù–∞–∑–∞–¥ –≤ –º–µ–Ω—é", callback_data="back_menu")]
                                     ]))


@router.callback_query(F.data == "2026")
async def callback_2024(callback: CallbackQuery, state: FSMContext) -> None:
    data = await state.get_data()
    msg = await get_statistics_by_user(data['user_id'], '2026')
    await callback.message.edit_text(f"üìä–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞üìä\n\n"
                                     f"{msg}",
                                     reply_markup=InlineKeyboardMarkup(inline_keyboard=[
                                         [InlineKeyboardButton(text="–ù–∞–∑–∞–¥ –≤ –º–µ–Ω—é", callback_data="back_menu")]
                                     ]))


@router.callback_query(F.data == "2027")
async def callback_2024(callback: CallbackQuery, state: FSMContext) -> None:
    data = await state.get_data()
    msg = await get_statistics_by_user(data['user_id'], '2027')
    await callback.message.edit_text(f"üìä–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞üìä\n\n"
                                     f"{msg}",
                                     reply_markup=InlineKeyboardMarkup(inline_keyboard=[
                                         [InlineKeyboardButton(text="–ù–∞–∑–∞–¥ –≤ –º–µ–Ω—é", callback_data="back_menu")]
                                     ]))


@router.callback_query(F.data == "2028")
async def callback_2024(callback: CallbackQuery, state: FSMContext) -> None:
    data = await state.get_data()
    msg = await get_statistics_by_user(data['user_id'], '2028')
    await callback.message.edit_text(f"üìä–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞üìä\n\n"
                                     f"{msg}",
                                     reply_markup=InlineKeyboardMarkup(inline_keyboard=[
                                         [InlineKeyboardButton(text="–ù–∞–∑–∞–¥ –≤ –º–µ–Ω—é", callback_data="back_menu")]
                                     ]))


@router.callback_query(F.data == "2029")
async def callback_2024(callback: CallbackQuery, state: FSMContext) -> None:
    data = await state.get_data()
    msg = await get_statistics_by_user(data['user_id'], '2029')
    await callback.message.edit_text(f"üìä–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞üìä\n\n"
                                     f"{msg}",
                                     reply_markup=InlineKeyboardMarkup(inline_keyboard=[
                                         [InlineKeyboardButton(text="–ù–∞–∑–∞–¥ –≤ –º–µ–Ω—é", callback_data="back_menu")]
                                     ]))


@router.callback_query(F.data == "2030")
async def callback_2024(callback: CallbackQuery, state: FSMContext) -> None:
    data = await state.get_data()
    msg = await get_statistics_by_user(data['user_id'], '2030')
    await callback.message.edit_text(f"üìä–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞üìä\n\n"
                                     f"{msg}",
                                     reply_markup=InlineKeyboardMarkup(inline_keyboard=[
                                         [InlineKeyboardButton(text="–ù–∞–∑–∞–¥ –≤ –º–µ–Ω—é", callback_data="back_menu")]
                                     ]))


@router.callback_query(F.data == "back_menu")
async def callback_back_menu(callback: CallbackQuery, state: FSMContext) -> None:
    await callback.message.edit_text("üìé–ü—Ä–æ—Ñ–∏–ª—åüìé", reply_markup=InlineKeyboardMarkup(inline_keyboard=[
        [
            InlineKeyboardButton(text="–ò—Å—Ç–æ—Ä–∏—è —Ç—Ä–µ–Ω–∏—Ä–æ–≤–æ–∫", callback_data="history_tren"),
            InlineKeyboardButton(text="–ö–æ–ª-–≤–æ —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω—ã—Ö –±–∞–ª–ª–æ–≤", callback_data="ref_bonus"),
        ],
        [
            InlineKeyboardButton(text="–ê–±–æ–Ω–µ–º–µ–Ω—Ç", callback_data="card"),
            InlineKeyboardButton(text="–ù–æ—Ä–º–∞—Ç–∏–≤—ã", callback_data="normatives")
        ],
        [InlineKeyboardButton(text="–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞", callback_data="statistics")]
    ]))
