from src.db.router import cursor, conn


async def insert_standard(user_id, first_name):
    cursor.execute("""INSERT INTO bot_app_standards(telegram_id, first_name,thunder, turkish_ascent_axel, turkish_ascent_kettlebell,
     bench_press, axel_jerk, taking_on_axel_chest, gluteal_bridge, deadlift, jerk, taking_on_the_chest, axel_deadlift,
      classic_squat, front_squat, squat_over_the_head, skipping_rope, push_ups, shuttle_running, farmer_walk, pull_ups,
       high_jump, long_jump, holding_the_axel, handstand) VALUES (%s, %s, %s, %s, %s, %s, %s,%s, %s, %s, %s, %s, %s,
        %s, %s, %s, %s,%s, %s, %s, %s, %s, %s, %s, %s)""", (user_id, first_name, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                                                        0, 0, 0, 0, 0))
    conn.commit()


async def get_names_standards(name):
    cursor.execute("SELECT first_name FROM bot_app_standards WHERE first_name=%s", (name,))
    rows = cursor.fetchall()

    result = []

    if len(result) != 0:
        for _ in range(len(rows)):
            result.append(rows[_][0])

        print(result)
        return result


async def get_standards_by_id(user_id):
    cursor.execute("""SELECT * FROM bot_app_standards WHERE telegram_id=%s""", (user_id,))
    result = cursor.fetchall()[0]
    conn.commit()

    msg = (f"–ì—Ä–æ–º - {result[1]}\n"
           f"–¢—É—Ä–µ—Ü–∫–∏–π –ø–æ–¥—ä–µ–º: –ê–∫—Å–µ–ª—å - {result[2]}\n"
           f"–¢—É—Ä–µ—Ü–∫–∏–π –ø–æ–¥—ä–µ–º: –ì–∏—Ä—è - {result[3]}\n"
           f"–ñ–∏–º –ª–µ–∂–∞ 1–ü–ú - {result[4]}\n"
           f"–†—ã–≤–æ–∫ –∞–∫—Å–µ–ª—è 1–ü–ú - {result[5]}\n"
           f"–í–∑—è—Ç–∏–µ –Ω–∞ –≥—Ä—É–¥—å –∞–∫—Å–µ–ª—è 1–ü–ú - {result[6]}\n"
           f"–Ø–≥–æ–¥–∏—á–Ω—ã–π –º–æ—Å—Ç–∏–∫ 1–ü–ú - {result[7]}\n"
           f"–°—Ç–∞–Ω–æ–≤–∞—è —Ç—è–≥–∞ 1–ü–ú - {result[8]}\n"
           f"–†—ã–≤–æ–∫ 1–ü–ú - {result[9]}\n"
           f"–í–∑—è—Ç–∏–µ –Ω–∞ –≥—Ä—É–¥—å 1–ü–ú - {result[10]}\n"
           f"–°—Ç–∞–Ω–æ–≤–∞—è —Ç—è–≥–∞ –∞–∫—Å–µ–ª—è 1–ü–ú - {result[11]}\n"
           f"–ü—Ä–∏—Å–µ–¥ 1–ü–ú: –ö–ª–∞—Å—Å–∏—á–µ—Å–∫–∏–π - {result[12]}\n"
           f"–ü—Ä–∏—Å–µ–¥ 1–ü–ú: –§—Ä–æ–Ω—Ç–∞–ª—å–Ω—ã–π - {result[13]}\n"
           f"–ü—Ä–∏—Å–µ–¥ 1–ü–ú: –ù–∞–¥ –≥–æ–ª–æ–≤–æ–π - {result[14]}\n"
           f"–°–∫–∞–∫–∞–ª–∫–∞ - {result[15]}\n"
           f"–û—Ç–∂–∏–º–∞–Ω–∏—è –æ—Ç –ø–æ–ª–∞ - {result[16]}\n"
           f"–ß–µ–ª–Ω–æ—á–Ω—ã–π –±–µ–≥ - {result[17]}\n"
           f"–ü—Ä–æ–≥—É–ª–∫–∞ —Ñ–µ—Ä–º–µ—Ä–∞ - {result[18]}\n"
           f"–ü–æ–¥—Ç—è–≥–∏–≤–∞–Ω–∏—è - {result[19]}\n"
           f"–ü—Ä—ã–∂–æ–∫ –≤ –≤—ã—Å–æ—Ç—É - {result[20]}\n"
           f"–ü—Ä—ã–∂–æ–∫ –≤ –¥–ª–∏–Ω—É - {result[21]}\n"
           f"–£–¥–µ—Ä–∂–∞–Ω–∏–µ –∞–∫—Å–µ–ª—è - {result[22]}\n"
           f"–°—Ç–æ–π–∫–∞ –Ω–∞ —Ä—É–∫–∞—Ö - {result[23]}\n")

    if result is not None:
        return msg
    else:
        raise ValueError("No standard for user id {}".format(user_id))


async def get_all_thunder():
    cursor.execute("""SELECT thunder FROM bot_app_standards""")
    result = cursor.fetchall()[0]

    msg = f"üìä–ì–†–û–úüìä\n\n"

    if result is not None and len(result) > 0:
        for _ in range(len(result)):
            msg += f'{_ + 1}. {result[_]}\n'

        return msg
    else:
        return "–í –≤—ã–±—Ä–∞–Ω–Ω–æ–º —Å–µ–≥–º–µ–Ω—Ç–µ –Ω–æ—Ä–º–∞—Ç–∏–≤—ã –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç!"


async def get_all_turkish_ascent_axel():
    cursor.execute("""SELECT turkish_ascent_axel FROM bot_app_standards""")
    result = cursor.fetchall()[0]

    msg = "üìä–¢—É—Ä–µ—Ü–∫–∏–π –ø–æ–¥—ä–µ–º: –ê–∫—Å–µ–ª—åüìä\n\n"

    if result is not None and len(result) > 0:
        for _ in range(len(result)):
            msg += f'{_ + 1}. {result[_]}\n'

        return msg
    else:
        return "–í –≤—ã–±—Ä–∞–Ω–Ω–æ–º —Å–µ–≥–º–µ–Ω—Ç–µ –Ω–æ—Ä–º–∞—Ç–∏–≤—ã –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç!"


async def get_all_turkish_ascent_kettlebell():
    cursor.execute("""SELECT turkish_ascent_kettlebell FROM bot_app_standards""")
    result = cursor.fetchall()[0]

    msg = "üìä–¢—É—Ä–µ—Ü–∫–∏–π –ø–æ–¥—ä–µ–º: –ì–∏—Ä—èüìä\n\n"

    if result is not None and len(result) > 0:
        for _ in range(len(result)):
            msg += f'{_ + 1}. {result[_]}\n'

        return msg
    else:
        return "–í –≤—ã–±—Ä–∞–Ω–Ω–æ–º —Å–µ–≥–º–µ–Ω—Ç–µ –Ω–æ—Ä–º–∞—Ç–∏–≤—ã –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç!"


async def get_all_bench_press():
    cursor.execute("""SELECT bench_press FROM bot_app_standards""")
    result = cursor.fetchall()[0]

    msg = "üìä–ñ–∏–º –ª–µ–∂–∞üìä\n\n"

    if result is not None and len(result) > 0:
        for _ in range(len(result)):
            msg += f'{_ + 1}. {result[_]}\n'

        return msg
    else:
        return "–í –≤—ã–±—Ä–∞–Ω–Ω–æ–º —Å–µ–≥–º–µ–Ω—Ç–µ –Ω–æ—Ä–º–∞—Ç–∏–≤—ã –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç!"


async def get_all_axel_jerk():
    cursor.execute("""SELECT axel_jerk FROM bot_app_standards""")
    result = cursor.fetchall()[0]

    msg = "üìä–†—ã–≤–æ–∫ –∞–∫—Å–µ–ª—è 1–ü–úüìä\n\n"

    if result is not None and len(result) > 0:
        for _ in range(len(result)):
            msg += f'{_ + 1}. {result[_]}\n'

        return msg
    else:
        return "–í –≤—ã–±—Ä–∞–Ω–Ω–æ–º —Å–µ–≥–º–µ–Ω—Ç–µ –Ω–æ—Ä–º–∞—Ç–∏–≤—ã –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç!"


async def get_all_taking_on_axel_chest():
    cursor.execute("""SELECT taking_on_axel_chest FROM bot_app_standards""")
    result = cursor.fetchall()[0]

    msg = f"üìä–í–∑—è—Ç–∏–µ –Ω–∞ –≥—Ä—É–¥—å –∞–∫—Å–µ–ª—è 1–ü–úüìä\n\n"
    if result is not None and len(result) > 0:
        for _ in range(len(result)):
            msg += f'{_ + 1}. {result[_]}\n'

        return msg
    else:
        return "–í –≤—ã–±—Ä–∞–Ω–Ω–æ–º —Å–µ–≥–º–µ–Ω—Ç–µ –Ω–æ—Ä–º–∞—Ç–∏–≤—ã –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç!"


async def get_all_gluteal_bridge():
    cursor.execute("""SELECT gluteal_bridge FROM bot_app_standards""")
    result = cursor.fetchall()[0]

    msg = "üìä–Ø–≥–æ–¥–∏—á–Ω—ã–π –º–æ—Å—Ç–∏–∫ 1–ü–úüìä\n\n"

    if result is not None and len(result) > 0:
        for _ in range(len(result)):
            msg += f'{_ + 1}. {result[_]}\n'

        return msg
    else:
        return "–í –≤—ã–±—Ä–∞–Ω–Ω–æ–º —Å–µ–≥–º–µ–Ω—Ç–µ –Ω–æ—Ä–º–∞—Ç–∏–≤—ã –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç!"


async def get_all_deadlift():
    cursor.execute("""SELECT deadlift FROM bot_app_standards""")
    result = cursor.fetchall()[0]

    msg = "üìä–°—Ç–∞–Ω–æ–≤–∞—è —Ç—è–≥–∞ 1–ü–úüìä\n\n"

    if result is not None and len(result) > 0:
        for _ in range(len(result)):
            msg += f'{_ + 1}. {result[_]}\n'

        return msg
    else:
        return "–í –≤—ã–±—Ä–∞–Ω–Ω–æ–º —Å–µ–≥–º–µ–Ω—Ç–µ –Ω–æ—Ä–º–∞—Ç–∏–≤—ã –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç!"


async def get_all_jerk():
    cursor.execute("""SELECT jerk FROM bot_app_standards""")
    result = cursor.fetchall()[0]

    msg = "üìä–†—ã–≤–æ–∫ 1–ü–úüìä\n\n"

    if result is not None and len(result) > 0:
        for _ in range(len(result)):
            msg += f'{_ + 1}. {result[_]}\n'

        return msg
    else:
        return "–í –≤—ã–±—Ä–∞–Ω–Ω–æ–º —Å–µ–≥–º–µ–Ω—Ç–µ –Ω–æ—Ä–º–∞—Ç–∏–≤—ã –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç!"


async def get_all_taking_on_the_chest():
    cursor.execute("""SELECT taking_on_the_chest FROM bot_app_standards""")
    result = cursor.fetchall()[0]

    msg = "üìä–í–∑—è—Ç–∏–µ –Ω–∞ –≥—Ä—É–¥—å 1–ü–úüìä\n\n"

    if result is not None and len(result) > 0:
        for _ in range(len(result)):
            msg += f'{_ + 1}. {result[_]}\n'

        return msg
    else:
        return "–í –≤—ã–±—Ä–∞–Ω–Ω–æ–º —Å–µ–≥–º–µ–Ω—Ç–µ –Ω–æ—Ä–º–∞—Ç–∏–≤—ã –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç!"


async def get_all_axel_deadlift():
    cursor.execute("""SELECT axel_deadlift FROM bot_app_standards""")
    result = cursor.fetchall()[0]

    msg = "üìä–°—Ç–∞–Ω–æ–≤–∞—è —Ç—è–≥–∞ –∞–∫—Å–µ–ª—è 1–ü–úüìä\n\n"

    if result is not None and len(result) > 0:
        for _ in range(len(result)):
            msg += f'{_ + 1}. {result[_]}\n'

        return msg
    else:
        return "–í –≤—ã–±—Ä–∞–Ω–Ω–æ–º —Å–µ–≥–º–µ–Ω—Ç–µ –Ω–æ—Ä–º–∞—Ç–∏–≤—ã –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç!"


async def get_all_classic_squat():
    cursor.execute("""SELECT classic_squat FROM bot_app_standards""")
    result = cursor.fetchall()[0]

    msg = "üìä–ü—Ä–∏—Å–µ–¥ 1–ü–ú: –ö–ª–∞—Å—Å–∏—á–µ—Å–∫–∏–πüìä\n\n"

    if result is not None and len(result) > 0:
        for _ in range(len(result)):
            msg += f'{_ + 1}. {result[_]}\n'

        return msg
    else:
        return "–í –≤—ã–±—Ä–∞–Ω–Ω–æ–º —Å–µ–≥–º–µ–Ω—Ç–µ –Ω–æ—Ä–º–∞—Ç–∏–≤—ã –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç!"


async def get_all_front_squat():
    cursor.execute("""SELECT front_squat FROM bot_app_standards""")
    result = cursor.fetchall()[0]

    msg = "üìä–ü—Ä–∏—Å–µ–¥ 1–ü–ú: –§—Ä–æ–Ω—Ç–∞–ª—å–Ω—ã–πüìä\n\n"

    if result is not None and len(result) > 0:
        for _ in range(len(result)):
            msg += f'{_ + 1}. {result[_]}\n'

        return msg
    else:
        return "–í –≤—ã–±—Ä–∞–Ω–Ω–æ–º —Å–µ–≥–º–µ–Ω—Ç–µ –Ω–æ—Ä–º–∞—Ç–∏–≤—ã –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç!"


async def get_all_squat_over_the_head():
    cursor.execute("""SELECT squat_over_the_head FROM bot_app_standards""")
    result = cursor.fetchall()[0]

    msg = "üìä–ü—Ä–∏—Å–µ–¥ 1–ü–ú: –ù–∞–¥ –≥–æ–ª–æ–≤–æ–πüìä\n\n"

    if result is not None and len(result) > 0:
        for _ in range(len(result)):
            msg += f'{_ + 1}. {result[_]}\n'

        return msg
    else:
        return "–í –≤—ã–±—Ä–∞–Ω–Ω–æ–º —Å–µ–≥–º–µ–Ω—Ç–µ –Ω–æ—Ä–º–∞—Ç–∏–≤—ã –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç!"


async def get_all_skipping_rope():
    cursor.execute("""SELECT skipping_rope FROM bot_app_standards""")
    result = cursor.fetchall()[0]

    msg = "üìä–°–∫–∞–∫–∞–ª–∫–∞üìä\n\n"

    if result is not None and len(result) > 0:
        for _ in range(len(result)):
            msg += f'{_ + 1}. {result[_]}\n'

        return msg
    else:
        return "–í –≤—ã–±—Ä–∞–Ω–Ω–æ–º —Å–µ–≥–º–µ–Ω—Ç–µ –Ω–æ—Ä–º–∞—Ç–∏–≤—ã –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç!"


async def get_all_push_ups():
    cursor.execute("""SELECT push_ups FROM bot_app_standards""")
    result = cursor.fetchall()[0]

    msg = "üìä–û—Ç–∂–∏–º–∞–Ω–∏—è –æ—Ç –ø–æ–ª–∞üìä\n\n"

    if result is not None and len(result) > 0:
        for _ in range(len(result)):
            msg += f'{_ + 1}. {result[_]}\n'

        return msg
    else:
        return "–í –≤—ã–±—Ä–∞–Ω–Ω–æ–º —Å–µ–≥–º–µ–Ω—Ç–µ –Ω–æ—Ä–º–∞—Ç–∏–≤—ã –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç!"


async def get_all_shuttle_running():
    cursor.execute("""SELECT shuttle_running FROM bot_app_standards""")
    result = cursor.fetchall()[0]

    msg = "üìä–ß–µ–ª–Ω–æ—á–Ω—ã–π –±–µ–≥üìä\n\n"

    if result is not None and len(result) > 0:
        for _ in range(len(result)):
            msg += f'{_ + 1}. {result[_]}\n'

        return msg
    else:
        return "–í –≤—ã–±—Ä–∞–Ω–Ω–æ–º —Å–µ–≥–º–µ–Ω—Ç–µ –Ω–æ—Ä–º–∞—Ç–∏–≤—ã –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç!"


async def get_all_farmer_walk():
    cursor.execute("""SELECT farmer_walk FROM bot_app_standards""")
    result = cursor.fetchall()[0]

    msg = "üìä–ü—Ä–æ–≥—É–ª–∫–∞ —Ñ–µ—Ä–º–µ—Ä–∞üìä\n\n"

    if result is not None and len(result) > 0:
        for _ in range(len(result)):
            msg += f'{_ + 1}. {result[_]}\n'

        return msg
    else:
        return "–í –≤—ã–±—Ä–∞–Ω–Ω–æ–º —Å–µ–≥–º–µ–Ω—Ç–µ –Ω–æ—Ä–º–∞—Ç–∏–≤—ã –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç!"


async def get_all_pull_ups():
    cursor.execute("""SELECT pull_ups FROM bot_app_standards""")
    result = cursor.fetchall()[0]

    msg = "üìä–ü–æ–¥—Ç—è–≥–∏–≤–∞–Ω–∏—èüìä\n\n"

    if result is not None and len(result) > 0:
        for _ in range(len(result)):
            msg += f'{_ + 1}. {result[_]}\n'

        return msg
    else:
        return "–í –≤—ã–±—Ä–∞–Ω–Ω–æ–º —Å–µ–≥–º–µ–Ω—Ç–µ –Ω–æ—Ä–º–∞—Ç–∏–≤—ã –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç!"


async def get_all_high_jump():
    cursor.execute("""SELECT high_jump FROM bot_app_standards""")
    result = cursor.fetchall()[0]

    msg = "üìä–ü—Ä—ã–∂–æ–∫ –≤ –≤—ã—Å–æ—Ç—Éüìä\n\n"

    if result is not None and len(result) > 0:
        for _ in range(len(result)):
            msg += f'{_ + 1}. {result[_]}\n'

        return msg
    else:
        return "–í –≤—ã–±—Ä–∞–Ω–Ω–æ–º —Å–µ–≥–º–µ–Ω—Ç–µ –Ω–æ—Ä–º–∞—Ç–∏–≤—ã –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç!"


async def get_all_long_jump():
    cursor.execute("""SELECT long_jump FROM bot_app_standards""")
    result = cursor.fetchall()[0]

    msg = (f"üìä–ü—Ä—ã–∂–æ–∫ –≤ –¥–ª–∏–Ω—Éüìä\n\n")

    if result is not None and len(result) > 0:
        for _ in range(len(result)):
            msg += f'{_ + 1}. {result[_]}\n'

        return msg
    else:
        return "–í –≤—ã–±—Ä–∞–Ω–Ω–æ–º —Å–µ–≥–º–µ–Ω—Ç–µ –Ω–æ—Ä–º–∞—Ç–∏–≤—ã –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç!"


async def get_all_holding_the_axel():
    cursor.execute("""SELECT holding_the_axel FROM bot_app_standards""")
    result = cursor.fetchall()[0]

    msg = "üìä–£–¥–µ—Ä–∂–∞–Ω–∏–µ –∞–∫—Å–µ–ª—èüìä\n\n"

    if result is not None and len(result) > 0:
        for _ in range(len(result)):
            msg += f'{_ + 1}. {result[_]}\n'

        return msg
    else:
        return "–í –≤—ã–±—Ä–∞–Ω–Ω–æ–º —Å–µ–≥–º–µ–Ω—Ç–µ –Ω–æ—Ä–º–∞—Ç–∏–≤—ã –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç!"


async def get_all_handstand():
    cursor.execute("""SELECT handstand FROM bot_app_standards""")
    result = cursor.fetchall()[0]

    msg = "üìä–°—Ç–æ–π–∫–∞ –Ω–∞ —Ä—É–∫–∞—Öüìä\n\n"

    if result is not None and len(result) > 0:
        for _ in range(len(result)):
            msg += f'{_ + 1}. {result[_]}\n'

        return msg
    else:
        return "–í –≤—ã–±—Ä–∞–Ω–Ω–æ–º —Å–µ–≥–º–µ–Ω—Ç–µ –Ω–æ—Ä–º–∞—Ç–∏–≤—ã –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç!"
