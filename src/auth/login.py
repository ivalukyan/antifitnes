from aiogram import F, Router
from aiogram.filters import Command
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup
from aiogram.types import (
    Message,
    InlineKeyboardMarkup, InlineKeyboardButton, CallbackQuery,
)

from src.auth.signup import check_number
from src.db.db_users import get_phone_number, get_name, check_login
from src.db.db_standards import get_standards_by_id
from src.db.db_profile import training_history, number_of_referral_points, info_subscription
from src.srm.srm_bot import check_crm, update_profile


router = Router()

database = {'user_id': 0}


class Form(StatesGroup):
    """
    number_login - state for input number user
    """

    # Loging
    number_login = State()


# Login in your personal account
@router.message(Command('login'))
async def login(message: Message, state: FSMContext) -> None:
    await state.set_state(Form.number_login)
    await message.answer("<b>–í–•–û–î –í –°–ò–°–¢–ï–ú–£</b>\n\n"
                         "–í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä —Å–≤–æ–µ–≥–æ —Ç–µ–ª–µ—Ñ–æ–Ω–∞: \n<i>–ø—Ä–∏–º–µ—Ä:</i> +79889998989")


@router.message(Form.number_login)
async def input_number(message: Message, state: FSMContext) -> None:
    await state.update_data(input_number=message.text)
    database['user_id'] = message.from_user.id
    # user = await get_users()
    data = await state.get_data()

    if (await check_login(message.from_user.id)) and (await check_number(data['input_number'])) and (await check_crm(data['input_number'])):
        if (await get_phone_number(message.from_user.id))[-10:] == data['input_number'][-10:]:
            await update_profile(data['input_number'], message.from_user.id)
            await message.answer(f"{await get_name(message.from_user.id)}, –¥–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å, –≤ —Å–ø–æ—Ä—Ç–∏–≤–Ω—ã–π –∫–ª—É–±!")
            await message.answer("üìé–ü—Ä–æ—Ñ–∏–ª—åüìé", reply_markup=InlineKeyboardMarkup(inline_keyboard=[
                [
                    InlineKeyboardButton(text="–ò—Å—Ç–æ—Ä–∏—è —Ç—Ä–µ–Ω–∏—Ä–æ–≤–æ–∫", callback_data="history_tren"),
                    InlineKeyboardButton(text="–ö–æ–ª-–≤–æ —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω—ã—Ö –±–∞–ª–ª–æ–≤", callback_data="ref_bonus"),
                ],
                [
                    InlineKeyboardButton(text="–ê–±–æ–Ω–µ–º–µ–Ω—Ç", callback_data="card"),
                    InlineKeyboardButton(text="–ù–æ—Ä–º–∞—Ç–∏–≤—ã", callback_data="normatives")
                ]
            ]))
        else:
            await message.answer("–£–ø—Å...–ø–æ—Ö–æ–∂–µ –æ—à–∏–±–∫–∞ –≤ –≤–µ–¥–µ–Ω–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö")
        await state.clear()
    else:
        await message.answer("–í—ã –Ω–µ –∑–∞—Ä–µ–≥–µ—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã –≤ —Å–∏—Å—Ç–µ–º–µ, —Å–Ω–∞—á–∞–ª–∞ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–π—Ç–µ—Å—å\n"
                             "–ò–ª–∏ –ø–æ–¥–æ–∂–¥–∏—Ç–µ –ø–æ–∫–∞ –≤–∞—Å –ø–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç"
                             "–∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä")
    await state.clear()


@router.callback_query(F.data == "history_tren")
async def callback_history_tren(callback: CallbackQuery) -> None:
    msg = await training_history(database['user_id'])
    await callback.message.edit_text(f"üîó–ò–°–¢–û–†–ò–Ø –¢–†–ï–ù–ò–†–û–í–û–öüîó\n\n"
                                     f"{msg}",
                                     reply_markup=InlineKeyboardMarkup(inline_keyboard=[
                                         [InlineKeyboardButton(text="–ù–∞–∑–∞–¥ –≤ –º–µ–Ω—é", callback_data="back_menu")]
                                     ]))


@router.callback_query(F.data == "ref_bonus")
async def callback_ref_bonus(callback: CallbackQuery) -> None:
    msg = await number_of_referral_points(database['user_id'])
    await callback.message.edit_text("üîó–†–µ—Ñ–µ—Ä–∞–ª—å–Ω—ã–µ –±–æ–Ω—É—Å—ãüîó\n\n"
                                     f"{msg}",
                                     reply_markup=InlineKeyboardMarkup(inline_keyboard=[
                                         [InlineKeyboardButton(text="–ù–∞–∑–∞–¥ –≤ –º–µ–Ω—é", callback_data="back_menu")]
                                     ]))


@router.callback_query(F.data == "card")
async def callback_card(callback: CallbackQuery) -> None:
    msg = await info_subscription(database['user_id'])
    await callback.message.edit_text("ü™™–ê–ë–û–ù–ï–ú–ï–ù–¢ü™™\n\n"
                                     f"{msg}",
                                     reply_markup=InlineKeyboardMarkup(inline_keyboard=[
                                         [InlineKeyboardButton(text="–ù–∞–∑–∞–¥ –≤ –º–µ–Ω—é", callback_data="back_menu")]
                                     ]))


@router.callback_query(F.data == "normatives")
async def callback_normatives(callback: CallbackQuery) -> None:
    msg = await get_standards_by_id(database['user_id'])
    await callback.message.edit_text(f"üìâ–ê–ù–ê–õ–ò–ó –ù–û–†–ú–ê–¢–ò–í–û–íüìâ\n\n"
                                     f"{msg}",
                                     reply_markup=InlineKeyboardMarkup(inline_keyboard=[
                                         [InlineKeyboardButton(text="–ù–∞–∑–∞–¥ –≤ –º–µ–Ω—é", callback_data="back_menu")]
                                     ]))


@router.callback_query(F.data == "back_menu")
async def callback_back_menu(callback: CallbackQuery, state: FSMContext) -> None:
    await callback.message.edit_text("üìé–ü—Ä–æ—Ñ–∏–ª—åüìé", reply_markup=InlineKeyboardMarkup(inline_keyboard=[
        [
            InlineKeyboardButton(text="–ò—Å—Ç–æ—Ä–∏—è —Ç—Ä–µ–Ω–∏—Ä–æ–≤–æ–∫", callback_data="history_tren"),
            InlineKeyboardButton(text="–ö–æ–ª-–≤–æ —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω—ã—Ö –±–∞–ª–ª–æ–≤", callback_data="ref_bonus"),
        ],
        [
            InlineKeyboardButton(text="–ê–±–æ–Ω–µ–º–µ–Ω—Ç", callback_data="card"),
            InlineKeyboardButton(text="–ù–æ—Ä–º–∞—Ç–∏–≤—ã", callback_data="normatives")
        ]
    ]))
    await state.clear()
