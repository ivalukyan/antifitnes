import logging

from aiogram import F, Router
from aiogram.filters import Command
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup
from aiogram.types import (
    Message,
    InlineKeyboardMarkup, InlineKeyboardButton, CallbackQuery,
)


router = Router()


@router.message(Command('top'))
async def top(message: Message) -> None:
    await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ –Ω–æ—Ä–º–∞—Ç–∏–≤: ", reply_markup=InlineKeyboardMarkup(inline_keyboard=[
        [
            InlineKeyboardButton(text="–°–∏–ª–æ–≤—ã–µ –Ω–æ—Ä–º–∞—Ç–∏–≤—ã", callback_data="power_standards"),
            InlineKeyboardButton(text="–§—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω—ã–µ –Ω–æ—Ä–º–∞—Ç–∏–≤—ã", callback_data="fun_standards"),
        ]
    ]), resize_keyboard=True, one_time_keyboard=True)


@router.callback_query(F.data == "power_standards")
async def callback_top(call: CallbackQuery) -> None:
    await call.message.edit_text("üìä<i>–°–∏–ª–æ–≤—ã–µ –Ω–æ—Ä–º–∞—Ç–∏–≤—ã</i>üìä", reply_markup=InlineKeyboardMarkup(inline_keyboard=[
        [
            InlineKeyboardButton(text="–ì—Ä–æ–º", callback_data="grom"),
            InlineKeyboardButton(text="–¢—É—Ä–µ—Ü–∫–∏–π –ø–æ–¥—ä–µ–º: –ê–∫—Å–µ–ª—å", callback_data="tur_acsel"),
        ],
        [
            InlineKeyboardButton(text="–¢—É—Ä–µ—Ü–∫–∏–π –ø–æ–¥—ä–µ–º: –ì–∏—Ä—è", callback_data="tur_gir"),
            InlineKeyboardButton(text="–ñ–∏–º –ª–µ–∂–∞ 1–ü–ú", callback_data="bench_press"),
        ],
        [
            InlineKeyboardButton(text="–†—ã–≤–æ–∫ –∞–∫—Å–µ–ª—è 1–ü–ú", callback_data="jerk"),
            InlineKeyboardButton(text="–í–∑—è—Ç–∏–µ –Ω–∞ –≥—Ä—É–¥—å –∞–∫—Å–µ–ª—è 1–ü–ú", callback_data="jerk_two"),
        ],
        [
            InlineKeyboardButton(text="–Ø–≥–æ–¥–∏—á–Ω—ã–π –º–æ—Å—Ç–∏–∫ 1–ü–ú", callback_data="most"),
            InlineKeyboardButton(text="–°—Ç–∞–Ω–æ–≤–∞—è —Ç—è–≥–∞ 1–ü–ú", callback_data="deadlift"),
        ],
        [
            InlineKeyboardButton(text="–†—ã–≤–æ–∫ 1–ü–ú", callback_data="usual_jerk"),
            InlineKeyboardButton(text="–í–∑—è—Ç–∏–µ –Ω–∞ –≥—Ä—É–¥—å 1–ü–ú", callback_data="chest"),
        ],
        [
            InlineKeyboardButton(text="–°—Ç–∞–Ω–æ–≤–∞—è —Ç—è–≥–∞ –∞–∫—Å–µ–ª—è 1–ü–ú", callback_data="deadlift_jerk"),
            InlineKeyboardButton(text="–ü—Ä–∏—Å–µ–¥ 1–ü–ú: –ö–ª–∞—Å—Å–∏—á–µ—Å–∫–∏–π", callback_data="squat_classic"),
        ],
        [
            InlineKeyboardButton(text="–ü—Ä–∏—Å–µ–¥ 1–ü–ú: –§—Ä–æ–Ω—Ç–∞–ª—å–Ω—ã–π", callback_data="squat_front"),
            InlineKeyboardButton(text="–ü—Ä–∏—Å–µ–¥ 1–ü–ú: –ù–∞–¥ –≥–æ–ª–æ–≤–æ–π", callback_data="squat_under_head"),
        ],
        [
            InlineKeyboardButton(text="–ù–∞–∑–∞–¥ –≤ –º–µ–Ω—é", callback_data="back_norm")
        ]
    ]))


@router.callback_query(F.data == "fun_standards")
async def callback_functional_standards(call: CallbackQuery) -> None:
    await call.message.edit_text("üìä<i>–§—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω—ã–µ –Ω–æ—Ä–º–∞—Ç–∏–≤—ã</i>üìä", reply_markup=InlineKeyboardMarkup(inline_keyboard=[
        [
            InlineKeyboardButton(text="–°–∫–∞–∫–∞–ª–∫–∞", callback_data="skipping_rope"),
            InlineKeyboardButton(text="–û—Ç–∂–∏–º–∞–Ω–∏—è –æ—Ç –ø–æ–ª–∞", callback_data="push_ups"),
        ],
        [
            InlineKeyboardButton(text="–ß–µ–ª–Ω–æ—á–Ω—ã–π –±–µ–≥", callback_data="shuttle_running"),
            InlineKeyboardButton(text="–ü—Ä–æ–≥—É–ª–∫–∞ —Ñ–µ—Ä–º–µ—Ä–∞", callback_data="farmer_walk"),
        ],
        [
            InlineKeyboardButton(text="–ü–æ–¥—Ç—è–≥–∏–≤–∞–Ω–∏—è", callback_data="pull_ups"),
            InlineKeyboardButton(text="–ü—Ä—ã–∂–æ–∫ –≤ –≤—ã—Å–æ—Ç—É", callback_data="high_jump"),
        ],
        [
            InlineKeyboardButton(text="–ü—Ä—ã–∂–æ–∫ –≤ –¥–ª–∏–Ω—É", callback_data="long_jump"),
            InlineKeyboardButton(text="–£–¥–µ—Ä–∂–∞–Ω–∏–µ –∞–∫—Å–µ–ª—è", callback_data="holding_axel"),
        ],
        [
            InlineKeyboardButton(text="–°—Ç–æ–π–∫–∞ –Ω–∞ —Ä—É–∫–∞—Ö", callback_data="handstand"),
            InlineKeyboardButton(text="–ù–∞–∑–∞–¥ –≤ –º–µ–Ω—é", callback_data="back_norm")
        ]
    ]))


@router.callback_query(F.data == 'back_norm')
async def back_callback(call: CallbackQuery):
    await call.message.edit_text("–í—ã–±–µ—Ä–∏—Ç–µ –Ω–æ—Ä–º–∞—Ç–∏–≤: ", reply_markup=InlineKeyboardMarkup(inline_keyboard=[
        [
            InlineKeyboardButton(text="–°–∏–ª–æ–≤—ã–µ –Ω–æ—Ä–º–∞—Ç–∏–≤—ã", callback_data="power_standards"),
            InlineKeyboardButton(text="–§—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω—ã–µ –Ω–æ—Ä–º–∞—Ç–∏–≤—ã", callback_data="fun_standards")
        ]
    ]))
